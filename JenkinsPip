pipeline {
    agent any 
            stages 
	        {
                stage('Cloning') 
	        	{
                    steps 
		            {
                        checkout([$class: 'GitSCM',
                        branches: [[name: '*/master']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [],
                        submoduleCfg: [],
                        userRemoteConfigs: [[url: 'https://github.com/weerobert/coursework_2.git']]])
                    }
                }
                stage('Testing') 
		        {
                    environment 
					{
						scannerHome = tool 'SonarQube'
					}
					steps 
					{
						withSonarQubeEnv('SonarQube') 
						{
							sh "${scannerHome}/bin/sonar-scanner -D sonar.login=admin -D sonar.password=admin"
						}
						timeout(time: 10, unit: 'MINUTES') 
						{
							waitForQualityGate abortPipeline: true
						}
					}
                }
                stage('Push to DockerHub') 
		        {
                    steps 
		            {
                        script 
		            	{
							def app
							app = docker.build("hastey/coursework_2")
							docker.withRegistry('https://registry.hub.docker.com', 'docker_credentials') {
								app.push("${env.BUILD_NUMBER}")
								app.push("latest")
							}
                        }
                    }
                }
				stage('Kubernetes')
				{
					steps
					{
						script
						{
							bash '''#!/bin/bash
								kubectl create deployment kubernetes-dep --image=weerobert/coursework-2:latest
								kubectl expose deployment/kubernetes-dep --type="NodePort" --port 8080 --name node-port-service-dep
								kubectl scale deployment/kubernetes-dep --replicas=4
							'''
						}
					}
				}
            }
}
